#!/usr/bin/env python
# -*- coding: utf-8 -*-
import datetime as dt
import time, sys, os
import pymeasure
import numpy as np

class ms2830a(object):
    '''
    DESCRIPTION
    ================
    This class cntrols the ML2437A.

    ARGUMENTS
    ================
    1. dev: device number
        Type: int
        Default: 1
    '''

    def __init__(self, IP='192.168.100.115', port=49154):
        self.IP = IP
        self.port = port
        com_SA = pymeasure.ethernet(self.IP_SA, self.port_SA)
        self.sp = pymeasure.Agilent.N9343C(com_SA)

    def measure(self):
        '''        
        DESCRIPTION
        ================
        This function queries the input power level.
        
        ARGUMENTS
        ================
        1. ch: the sensor channel number.
            Number: 1-2
            Type: int
            Default: 1
        2. resolution: the sensor order of the resolution.
            Number: 1-3
            Type: int
            Default: 3
            
        RETURNS
        ================
        1. power: the power value [dBm]
            Type: float
        '''
        # settings of spectrum analyzer
        band_start = 2 #[GHz]
        band_end = 14 #[GHz]print(len(data1))
    
        ## Query Setting of Spectrum Analyzer
        self.sp.com.send("BAND?")
        rbw_raw = self.sp.com.readline()
        rbw_arr = rbw_raw.split("\n")
        rbw = float(rbw_arr[0])/1000
        self.sp.com.send("BAND:VID?")
        vbw_raw = self.sp.com.readline()
        vbw_arr = vbw_raw.split("\n")
        vbw = float(vbw_arr[0])/1000
        self.sp.com.send("SWE:TIME?")
        swtime_raw = self.sp.com.readline()
        swtime_arr = swtime_raw.split("\n")
        swtime = float(swtime_arr[0])
        self.sp.com.send("AVER:COUN?")
        average_raw = self.sp.com.readline()
        average_arr = average_raw.split("\n")
        average = average_arr[0]
        sp.com.send('FREQ:STAR?')
        start_freq = float(self.sp.com.readline())/1e9 #[GHz]
        sp.com.send('FREQ:STOP?')
        stop_freq = float(self.sp.com.readline())/1e9 #[GHz]
        sp.com.send('SWE:POIN?')
        trace_point = float(self.sp.com.readline())
    
        #Calculate Band range
        ch_width = (stop_freq - start_freq)/trace_point
        ch_start = int((band_start - start_freq)/ch_width)
        ch_end = int((band_end - start_freq)/ch_width)
        freq = np.linspace(start_freq, stop_freq, trace_point)
        sa = np.array([freq])   #sa means "spec array"
    
        # Start Measurement ===========================
        self.sp.com.send('TRAC? TRAC1')
        spec_raw = self.sp.com.readline()
        spec = np.array([spec_raw.split(',')], float)
        sa = np.r_[sa, spec]
        return sa
